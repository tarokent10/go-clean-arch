// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testImageItems(t *testing.T) {
	t.Parallel()

	query := ImageItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testImageItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ImageItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ImageItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ImageItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ImageItemExists to return true, but got false.")
	}
}

func testImageItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	imageItemFound, err := FindImageItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if imageItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testImageItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ImageItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testImageItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ImageItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testImageItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	imageItemOne := &ImageItem{}
	imageItemTwo := &ImageItem{}
	if err = randomize.Struct(seed, imageItemOne, imageItemDBTypes, false, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}
	if err = randomize.Struct(seed, imageItemTwo, imageItemDBTypes, false, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ImageItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testImageItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	imageItemOne := &ImageItem{}
	imageItemTwo := &ImageItem{}
	if err = randomize.Struct(seed, imageItemOne, imageItemDBTypes, false, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}
	if err = randomize.Struct(seed, imageItemTwo, imageItemDBTypes, false, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func imageItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageItem) error {
	*o = ImageItem{}
	return nil
}

func imageItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageItem) error {
	*o = ImageItem{}
	return nil
}

func imageItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ImageItem) error {
	*o = ImageItem{}
	return nil
}

func imageItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ImageItem) error {
	*o = ImageItem{}
	return nil
}

func imageItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ImageItem) error {
	*o = ImageItem{}
	return nil
}

func imageItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ImageItem) error {
	*o = ImageItem{}
	return nil
}

func imageItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ImageItem) error {
	*o = ImageItem{}
	return nil
}

func imageItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageItem) error {
	*o = ImageItem{}
	return nil
}

func imageItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageItem) error {
	*o = ImageItem{}
	return nil
}

func testImageItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ImageItem{}
	o := &ImageItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, imageItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ImageItem object: %s", err)
	}

	AddImageItemHook(boil.BeforeInsertHook, imageItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	imageItemBeforeInsertHooks = []ImageItemHook{}

	AddImageItemHook(boil.AfterInsertHook, imageItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	imageItemAfterInsertHooks = []ImageItemHook{}

	AddImageItemHook(boil.AfterSelectHook, imageItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	imageItemAfterSelectHooks = []ImageItemHook{}

	AddImageItemHook(boil.BeforeUpdateHook, imageItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	imageItemBeforeUpdateHooks = []ImageItemHook{}

	AddImageItemHook(boil.AfterUpdateHook, imageItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	imageItemAfterUpdateHooks = []ImageItemHook{}

	AddImageItemHook(boil.BeforeDeleteHook, imageItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	imageItemBeforeDeleteHooks = []ImageItemHook{}

	AddImageItemHook(boil.AfterDeleteHook, imageItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	imageItemAfterDeleteHooks = []ImageItemHook{}

	AddImageItemHook(boil.BeforeUpsertHook, imageItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	imageItemBeforeUpsertHooks = []ImageItemHook{}

	AddImageItemHook(boil.AfterUpsertHook, imageItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	imageItemAfterUpsertHooks = []ImageItemHook{}
}

func testImageItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(imageItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImageItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImageItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ImageItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	imageItemDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Picture`: `blob`, `UpdateDateTime`: `timestamp`, `Department`: `varchar`, `Remarks`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                = bytes.MinRead
)

func testImageItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(imageItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(imageItemAllColumns) == len(imageItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testImageItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(imageItemAllColumns) == len(imageItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ImageItem{}
	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageItemDBTypes, true, imageItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(imageItemAllColumns, imageItemPrimaryKeyColumns) {
		fields = imageItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			imageItemAllColumns,
			imageItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ImageItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testImageItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(imageItemAllColumns) == len(imageItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLImageItemUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ImageItem{}
	if err = randomize.Struct(seed, &o, imageItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ImageItem: %s", err)
	}

	count, err := ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, imageItemDBTypes, false, imageItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ImageItem: %s", err)
	}

	count, err = ImageItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
