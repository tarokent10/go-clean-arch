// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testImageTags(t *testing.T) {
	t.Parallel()

	query := ImageTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testImageTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ImageTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ImageTagExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ImageTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ImageTagExists to return true, but got false.")
	}
}

func testImageTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	imageTagFound, err := FindImageTag(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if imageTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testImageTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ImageTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testImageTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ImageTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testImageTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	imageTagOne := &ImageTag{}
	imageTagTwo := &ImageTag{}
	if err = randomize.Struct(seed, imageTagOne, imageTagDBTypes, false, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}
	if err = randomize.Struct(seed, imageTagTwo, imageTagDBTypes, false, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ImageTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testImageTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	imageTagOne := &ImageTag{}
	imageTagTwo := &ImageTag{}
	if err = randomize.Struct(seed, imageTagOne, imageTagDBTypes, false, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}
	if err = randomize.Struct(seed, imageTagTwo, imageTagDBTypes, false, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func imageTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageTag) error {
	*o = ImageTag{}
	return nil
}

func imageTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageTag) error {
	*o = ImageTag{}
	return nil
}

func imageTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ImageTag) error {
	*o = ImageTag{}
	return nil
}

func imageTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ImageTag) error {
	*o = ImageTag{}
	return nil
}

func imageTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ImageTag) error {
	*o = ImageTag{}
	return nil
}

func imageTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ImageTag) error {
	*o = ImageTag{}
	return nil
}

func imageTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ImageTag) error {
	*o = ImageTag{}
	return nil
}

func imageTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageTag) error {
	*o = ImageTag{}
	return nil
}

func imageTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageTag) error {
	*o = ImageTag{}
	return nil
}

func testImageTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ImageTag{}
	o := &ImageTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, imageTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ImageTag object: %s", err)
	}

	AddImageTagHook(boil.BeforeInsertHook, imageTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	imageTagBeforeInsertHooks = []ImageTagHook{}

	AddImageTagHook(boil.AfterInsertHook, imageTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	imageTagAfterInsertHooks = []ImageTagHook{}

	AddImageTagHook(boil.AfterSelectHook, imageTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	imageTagAfterSelectHooks = []ImageTagHook{}

	AddImageTagHook(boil.BeforeUpdateHook, imageTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	imageTagBeforeUpdateHooks = []ImageTagHook{}

	AddImageTagHook(boil.AfterUpdateHook, imageTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	imageTagAfterUpdateHooks = []ImageTagHook{}

	AddImageTagHook(boil.BeforeDeleteHook, imageTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	imageTagBeforeDeleteHooks = []ImageTagHook{}

	AddImageTagHook(boil.AfterDeleteHook, imageTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	imageTagAfterDeleteHooks = []ImageTagHook{}

	AddImageTagHook(boil.BeforeUpsertHook, imageTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	imageTagBeforeUpsertHooks = []ImageTagHook{}

	AddImageTagHook(boil.AfterUpsertHook, imageTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	imageTagAfterUpsertHooks = []ImageTagHook{}
}

func testImageTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(imageTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImageTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImageTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ImageTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	imageTagDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_               = bytes.MinRead
)

func testImageTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(imageTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(imageTagAllColumns) == len(imageTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testImageTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(imageTagAllColumns) == len(imageTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ImageTag{}
	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageTagDBTypes, true, imageTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(imageTagAllColumns, imageTagPrimaryKeyColumns) {
		fields = imageTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			imageTagAllColumns,
			imageTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ImageTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testImageTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(imageTagAllColumns) == len(imageTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLImageTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ImageTag{}
	if err = randomize.Struct(seed, &o, imageTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ImageTag: %s", err)
	}

	count, err := ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, imageTagDBTypes, false, imageTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ImageTag: %s", err)
	}

	count, err = ImageTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
